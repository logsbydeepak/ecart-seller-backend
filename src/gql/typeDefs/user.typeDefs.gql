type Query {
  readUser: ReadUserResponse!
}

type Mutation {
  createUser(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  ): CreateUserResponse!

  deleteUser(currentPassword: String!): DeleteUserCredentialError!

  updateUserName(
    firstName: String!
    lastName: String!
    currentPassword: String!
  ): UpdateUserNameResponse!

  updateUserEmail(
    email: String!
    currentPassword: String!
  ): UpdateUserEmailResponse!

  updateUserPassword(
    currentPassword: String!
    password: String!
  ): UpdateUserPasswordResponse!
}

union ReadUserResponse = TokenError | User

union CreateUserResponse =
    Token
  | CreateUserCredentialError
  | UserAlreadyExistError

union DeleteUserResponse =
    SuccessResponse
  | TokenError
  | DeleteUserCredentialError

union UpdateUserNameResponse =
    TokenError
  | UpdateUserNameCredentialError
  | UpdateUserNameSuccessResponse
  | UpdateUserInvalidUserCredentialError

union UpdateUserEmailResponse =
    TokenError
  | UpdateUserEmailCredentialError
  | UpdateUserEmailSuccessResponse
  | UserAlreadyExistError
  | UpdateUserInvalidUserCredentialError

union UpdateUserPasswordResponse =
    TokenError
  | UpdateUserPasswordCredentialError
  | UpdateUserPasswordSuccessResponse
  | UpdateUserInvalidUserCredentialError

type UpdateUserInvalidUserCredentialError implements Error {
  message: String!
}

type UpdateUserPasswordSuccessResponse {
  message: String!
}

enum UpdateUserPasswordCredentialField {
  currentPassword
  password
}

type UpdateUserPasswordCredentialError implements Error {
  field: UpdateUserPasswordCredentialField
  message: String!
}

type UpdateUserEmailSuccessResponse {
  email: String!
}

enum UpdateUserEmailCredentialField {
  currentPassword
  email
}

type UpdateUserEmailCredentialError implements Error {
  field: UpdateUserEmailCredentialField
  message: String!
}

type UpdateUserNameSuccessResponse {
  firstName: String!
  lastName: String!
}

enum UpdateUserNameCredentialField {
  currentPassword
  firstName
  lastName
}

type UpdateUserNameCredentialError implements Error {
  field: UpdateUserNameCredentialField
  message: String!
}

input ToUpdateName {
  firstName: String!
  lastName: String!
}

enum ToUpdateFiled {
  email
  name
  password
}

enum UpdateUserCredentialField {
  toUpdate
  currentPassword
  email
  password
  name
}

type UpdateUserCredentialError implements Error {
  field: UpdateUserCredentialField!
  message: String!
}

enum CreateUserCredentialFiled {
  firstName
  lastName
  email
  password
}

type CreateUserCredentialError implements Error {
  message: String!
  field: CreateUserCredentialFiled!
}

type UserAlreadyExistError implements Error {
  message: String!
}

type DeleteUserCredentialError implements Error {
  message: String!
}
