type Query {
  readUser: ReadUserResponse!
}

type Mutation {
  createUser(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  ): CreateUserResponse!

  deleteUser(currentPassword: String!): DeleteUserCredentialError!

  updateUser(
    toUpdate: ToUpdateFiled!
    currentPassword: String!
    email: String
    password: String
    name: ToUpdateName
  ): UpdateUserResponse!
}

union ReadUserResponse = TokenError | User

union CreateUserResponse =
    Token
  | CreateUserCredentialError
  | UserAlreadyExistError

union DeleteUserResponse =
    SuccessResponse
  | TokenError
  | DeleteUserCredentialError

union UpdateUserResponse =
    User
  | TokenError
  | UpdateUserCredentialError
  | UserAlreadyExistError

input ToUpdateName {
  firstName: String!
  lastName: String!
}

enum ToUpdateFiled {
  email
  name
  password
}

enum UpdateUserCredentialField {
  toUpdate
  currentPassword
  email
  password
  name
}

type UpdateUserCredentialError implements Error {
  field: UpdateUserCredentialField!
  message: String!
}

enum CreateUserCredentialFiled {
  firstName
  lastName
  email
  password
}

type CreateUserCredentialError implements Error {
  message: String!
  field: CreateUserCredentialFiled!
}

type UserAlreadyExistError implements Error {
  message: String!
}

type DeleteUserCredentialError implements Error {
  message: String!
}
