type Query {
  readUser: ReadUserResponse!
}

type Mutation {
  createUser(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  ): CreateUserResponse!
  deleteUser(currentPassword: String!): Response
  updateUser(
    toUpdate: String!
    email: String
    password: String
    name: FullName
    currentPassword: String!
  ): UserInfo
}

input FullName {
  firstName: String
  lastName: String
}

type Token {
  token: String!
}

interface Error {
  message: String!
}

enum CreateUserCredentialFiled {
  firstName
  lastName
  email
  password
}

type CreateUserCredentialError implements Error {
  message: String!
  field: CreateUserCredentialFiled!
}

type UserAlreadyExistError implements Error {
  message: String!
}

union CreateUserResponse =
    Token
  | CreateUserCredentialError
  | UserAlreadyExistError

type TokenMissingError implements Error {
  message: String!
}

type TokenInvalidError implements Error {
  message: String!
}

type TokenExpiredError implements Error {
  message: String!
}

enum TokenErrorType {
  TokenRequiredError
  TokenInvalidError
  TokenExpiredError
  TokenUserDoNotExistError
}

type TokenError implements Error {
  type: TokenErrorType!
  message: String!
}

union ReadUserResponse = TokenError | User
